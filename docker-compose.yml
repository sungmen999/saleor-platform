version: "3.3"

services:
  traefik:
    image: traefik:2.4.13
    command:
      - "--log.level=INFO"
      - "--log.filePath=etc/traefik/log/traefik.log"
      - "--accessLog=true"
      - "--accessLog.filePath=etc/traefik/log/access.log"
      - "--accessLog.bufferingSize=100"
      - "--accessLog.fields.names.StartUTC=drop"

      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=saleor-backend-tier"
      - "--providers.docker.defaultRule=Host(`{{ normalize .Name }}.dkapparel.store`)"

      - "--api.dashboard=true"
      - "--api.insecure=true"
      
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"

      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls.certresolver=letsencrypt"

      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare"
      - "--certificatesResolvers.letsencrypt.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53"
      - "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.letsencrypt.acme.email=${CF_API_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - 443:443
      - 80:80
    volumes:
      - ./letsencrypt:/letsencrypt
      - ./log/:/etc/traefik/log/
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - saleor-backend-tier
    environment:
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
      - CF_ZONE_API_TOKEN=${CF_ZONE_API_TOKEN}
      - TZ=Asia/Bangkok
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.proxy.rule=Host(`traefik.dkapparel.store`)"
      - "traefik.http.routers.proxy.entrypoints=websecure"
      - "traefik.http.routers.proxy.middlewares=secured"
      - "traefik.http.middlewares.secured.chain.middlewares=https-only,known-ips,auth-users"
      - "traefik.http.middlewares.auth-users.basicauth.users=${AUTH_USERNAME}:${AUTH_PASSWORD}"
      - "traefik.http.middlewares.https-only.redirectscheme.scheme=https"
      - "traefik.http.middlewares.known-ips.ipwhitelist.sourceRange=${CLOUDFLARE_IP_RANGES}"
      - "traefik.http.routers.proxy.service=proxy-service"
      - "traefik.http.services.proxy-service.loadbalancer.server.port=8080"

  api:
    image: registry.gitlab.com/dkapparel/saleor-platform/api:1.0.1
    restart: unless-stopped
    networks:
      - saleor-backend-tier
    depends_on:
      - db
      - redis
      - jaeger
    volumes:
      - ./saleor/saleor/:/app/saleor:Z
      - ./saleor/templates/:/app/templates:Z
      - ./saleor/tests/:/app/tests
      # shared volume between worker and api for media
      - saleor-media:/app/media
      - ~/app/dkapparel-10e74e83acf9.json:/app/credentials/dkapparel.json
    command: python manage.py runserver 0.0.0.0:8000
    env_file: common.env
    environment:
      - STOREFRONT_URL=https://dkapparel.store/
      - DASHBOARD_URL=https://backoffice.dkapparel.store/
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.dkapparel.store`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      # - "traefik.http.routers.api.middlewares=secured"
      # - "traefik.http.middlewares.secured.chain.middlewares=https-only,known-ips"
      # - "traefik.http.middlewares.https-only.redirectscheme.scheme=https"
      # - "traefik.http.middlewares.known-ips.ipwhitelist.sourceRange=${CLOUDFLARE_IP_RANGES}"
      - "traefik.http.routers.api.service=api-service"
      - "traefik.http.services.api-service.loadbalancer.server.port=8000"

  # storefront:
  #   image: registry.gitlab.com/dkapparel/saleor-platform/storefront
  #   restart: unless-stopped
  #   volumes:
  #     - ./saleor-storefront/:/app:cached
  #     - /app/node_modules/
  #   command: npm start -- --hostname 0.0.0.0
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.storefront.rule=Host(`dkapparel.store`)"
  #     - "traefik.http.routers.storefront.service=backoffice@internal"
  #     - "traefik.http.routers.storefront.entrypoints=websecure"
  #     - "traefik.http.routers.storefront.middlewares=storefront-secured"
  #     - "traefik.http.middlewares.storefront-secured.chain.middlewares=https-only,known-ips"
  #     - "traefik.http.middlewares.https-only.redirectscheme.scheme=https"
  #     - "traefik.http.middlewares.known-ips.ipwhitelist.sourceRange=${CLOUDFLARE_IP_RANGES}"
  #     - "traefik.http.services.storefront.loadbalancer.server.port=8100"

  backoffice:
    image: registry.gitlab.com/dkapparel/saleor-platform/backoffice
    restart: unless-stopped
    volumes:
      - ./saleor-dashboard/:/app:cached
      - /app/node_modules/
    networks:
      - saleor-backend-tier
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backoffice.rule=Host(`backoffice.dkapparel.store`)"
      - "traefik.http.routers.backoffice.entrypoints=websecure"
      # - "traefik.http.routers.backoffice.middlewares=secured"
      # - "traefik.http.middlewares.secured.chain.middlewares=https-only,known-ips"
      # - "traefik.http.middlewares.https-only.redirectscheme.scheme=https"
      # - "traefik.http.middlewares.known-ips.ipwhitelist.sourceRange=${CLOUDFLARE_IP_RANGES}"
      - "traefik.http.routers.backoffice.service=backoffice-service"
      - "traefik.http.services.backoffice-service.loadbalancer.server.port=80"

  db:
    image: library/postgres:11.1-alpine
    ports:
      - 5432:5432
    restart: unless-stopped
    networks:
      - saleor-backend-tier
    volumes:
      - saleor-db:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=saleor
      - POSTGRES_PASSWORD=saleor

  redis:
    image: library/redis:5.0-alpine
    ports:
      - 6379:6379
    restart: unless-stopped
    networks:
      - saleor-backend-tier
    volumes:
      - saleor-redis:/data

  rabbitmq:
    image: rabbitmq:3.8-management-alpine
    container_name: 'rabbitmq'
    ports:
        - 5673:5672
        - 15673:15672
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
        - saleor-backend-tier

  worker:
    image: registry.gitlab.com/dkapparel/saleor-platform/worker
    command: celery -A saleor --app=saleor.celeryconf:app worker --loglevel=info
    restart: unless-stopped
    networks:
      - saleor-backend-tier
    env_file: common.env
    depends_on:
      - redis
      - mailhog
    volumes:
      - ./saleor/saleor/:/app/saleor:Z,cached
      - ./saleor/templates/:/app/templates:Z,cached
      # shared volume between worker and api for media
      - saleor-media:/app/media

  jaeger:
    image: jaegertracing/all-in-one
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "9411:9411"
    restart: unless-stopped
    networks:
      - saleor-backend-tier

  mailhog:
    image: mailhog/mailhog
    ports:
      - 1025:1025 # smtp server
      - 8025:8025 # web ui. Visit http://localhost:8025/ to check emails
    restart: unless-stopped
    networks:
      - saleor-backend-tier

volumes:
  saleor-db:
    driver: local
  saleor-redis:
    driver: local
  saleor-media:

networks:
  saleor-backend-tier:
    driver: bridge